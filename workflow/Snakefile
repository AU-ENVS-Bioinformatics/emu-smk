import pandas as pd
import sys


configfile: "config/config.yaml"

input_directory = config["input_directory"]
extension = config.get("read_extension", "fastq")
database = config["database"]
metadata_file = config["metadata"]
metadata = pd.read_csv(metadata_file)
samples_names = metadata.iloc[:, 0].tolist() # first column of metadata are the sample names
emu_flags = config.get("emu_flags", "")
ranks = config.get("ranks", ["domain", "phylum", "class", "order", "family", "genus", "species"])


rule phyloseq:
    input:
        otu="results/emu_combined.tsv",
        metadata=metadata_file
    output:
        phyloseq="results/phyloseq.RDS",
        counts = "results/counts.csv",
        taxonomy = "results/taxonomy.csv",
    log:
        "logs/phyloseq.log"
    conda:
        "envs/phyloseq.yaml"
    script:
        "scripts/phyloseq.R"

rule combine_outputs_split:
    input:
        expand("steps/emu_abundances/{sample}.tsv", sample=samples_names)
    output:
        abundances = ensure("results/emu_combined.tsv", non_empty=True),
    log:
        "logs/emu/combined_split.log",
    params:
        ranks = ranks
    conda:
        "envs/dplyr.yaml"
    script:
        "scripts/combine_outputs.R"

rule abundance:
    input:
        reads=f"{input_directory}{{sample}}{extension}",
        db=f"{database}",
    output:
        abundances="steps/emu_abundances/{sample}.tsv",
        alignments=temp("steps/emu_abundances/{sample}_emu_alignments.sam"),
        unclassified= temp("steps/emu_abundances/{sample}_unclassified.fa"),
    log:
        "logs/emu/{sample}_abundance.log",
    params:
        extra= f"--keep-counts {emu_flags}",
    threads: config.get("threads_per_sample", 1)
    conda:
        "envs/emu.yaml"
    script:
        "scripts/emu_abundance.py"